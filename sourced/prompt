#!/bin/bash

# This contains everything that's done when a Bash prompt happens,
# namely setting: history behaviour, PROMPT_COMMAND, PS1, and PS2.

# Make sure all _lowercase_ functions are unset before exiting.


## Environment variables for controlling Bash history

# History file control to go with fancy PROMPT_COMMAND stuff
export HISTFILE="$HOME/.bash_history" # This will always be empty....
export HISTARCHIVE="$HOME/.bash_history.d" # Where the "hist" command looks...

# What to store and how
export HISTCONTROL="ignoreboth" # "both" = duplicate commands and whitespace
shopt -s histappend # Append history entries
shopt -s cmdhist # Store multiline commands as single commands


# Set PROMPT_COMMAND.
pcmd() {
    local append="history -a"
    local read="history -n"
    local save="cat $HISTFILE >> \"${HISTARCHIVE}/\$(date --utc +%F)\""
    local zero="> $HISTFILE"
    echo -n "$append;$read;$save;$zero"
}
export PROMPT_COMMAND="$(pcmd)"

# Get a properly-escaped color code. The surrounding "\[\]" are to
# tell Bash that the color code doesn't count towards the prompt's
# length.
color() { echo -n "\[\e[$1m\]"; }

# echo a bright ">" if everything's okay, otherwise echo a red "?"
_PS1_STATUS() {
    local status="$?"
    if [ "$status" != 0 ]; then
        echo -e '\e[1;31m'"$status!"
    fi
}

# Set PS1.
ps1() {
    local brown="$(color '0;33')"
    local hm='\D{%H%M}'
    local dark="$(color '1;30')"
    local sec='\D{%S}'
    local green="$(color '0;32')"
    # Not quite '~', as a workaround for Bash oddness. See <ref> for
    # details on the issues involved.
    # ref: http://stackoverflow.com/a/24347937/619001
    local fake_tilde="∼"
    local dir="\${PWD/#\$H/$fake_tilde}"
    local bright="$(color '1;37')"
    local status="$bright>\$(_PS1_STATUS)"
    local off="$(color 0)"
    echo -n "$brown$hm$dark:$sec$green$dir$status $off"
    # Result:
    # \[\e[0;33m\]\D{%H%M}\[\e[1;30m\]:\D{%S}\[\e[0;32m\]${PWD/#$H/∼}\[\e[1;37m\]>$(_PS1_STATUS) \[\e[0m\]
}
export PS1="$(ps1)"

# Set PS2.
ps2() {
    local cyan="$(color '0;36')"
    local off="$(color '0')"
    echo -n "$cyan> $off"
}
export PS2="$(ps2)"

unset pcmd color ps1 ps2

# See <ref> for Bash "eternal history" which might be adaptable to
# personal customizations and not losing history entered in one
# terminal when also using another.

# ref: http://www.debian-administration.org/articles/543
